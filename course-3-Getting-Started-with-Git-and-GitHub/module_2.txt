#### Git Workflows with Git Commands


## Git commands, description and Syntax

git add

Description: It adds changes to the staging area. This command stages the changes made to the files and prepares them for the next commit.

Syntax:

git add <filename.txt> (to add a specific file)
git add . (to add all the files that are new or changed in the current directory)
git add -A (to add all changes in the entire working tree, from the root of the repository, regardless of where you are in the directory structure)



git reset

Description: It resets changes in the working directory. When used with –hard HEAD, this command discards all changes made to the working directory and staging area and resets the repository to the last commit (HEAD).

Syntax:

git reset
git reset –hard HEAD



git branch

Description: It lists, creates, or deletes branches in a repository. To delete the branch, first check out the branch using git checkout and then run the command to delete the branch locally.

Syntax:

git branch (to list branches)
git branch <new-branch> (to create a new branch)
git branch -d <branch-name> (to delete a branch)



git checkout main

Description: It switches to the "main" branch. This will switch your current branch to "main."

Syntax: git checkout main



git clone

Description: It copies a repository from a remote source to your local machine. This will create a copy of the repository in your current working directory.

Syntax: git clone <repository URL>



git pull

Description: It fetches changes from a remote repository and merges them into your local branch. First, switch to the branch that you want to merge changes into by running the git checkout command. Then, run the git pull command, which will fetch the changes from the main branch of the origin remote repository and merge them into your current branch.

Syntax: git pull origin main



git push

Description: It uploads local repository content to a remote repository. Make sure you are on the branch that you want to push by running the git checkout command first, then push the branch to the remote repository.

Syntax: git push origin <branch-name>



git version

Description: It displays the current Git version installed on your system.

Syntax: git version



git diff

Description: It shows changes between commits, commit and working tree, etc. It also compares the branches.

Syntax:

git diff (shows the difference between the working directory and the last commit)
git diff HEAD~1 HEAD (shows the difference between the last and second-last commits)
git diff <branch-1> <branch-2> (compares the specified branches)



git revert

Description: It reverts a commit by applying a new commit. This will create a new commit that undoes the changes made by the last commit.

Syntax: git revert HEAD



git config –global user.email <Your GitHub Email>

Description: It sets a global email configuration for Git. This needs to be executed before doing a commit to authenticate the user's email ID.

Syntax: git config –global user.email <Your GitHub Email>




git config –global user.name <Your GitHub Username>

Description: It sets a global username configuration for Git. This needs to be executed before doing a commit to authenticate users' username.

Syntax: git config –global user.name <Your GitHub Username>



git remote

Description: It lists the names of all remote repositories associated with your local repository.

Syntax: git remote



git remote -v

Description: It lists all remote repositories that your local Git repository is connected to, along with the URLs associated with those remote repositories.

Syntax: git remote -v



git remote add origin <URL>

Description: It adds a remote repository named "origin" with the specified URL.

Syntax: git remote add origin <URL>



git remote rename

Description: The git remote rename command is followed by the name of the remote repository (origin) you want to rename and the new name (upstream) you want to give it. This will rename the "origin" remote repository to "upstream."

Syntax: git remote rename origin upstream



git remote rm <name>

Description: It removes a remote repository with the specified name.

Syntax: git remote rm origin



git format-patch

Description: It generates patches for email submission. These patches can be used for submitting changes via email or for sharing them with others.

Syntax: git format-patch HEAD~3 (creates patches for the last three commits)



git request-pull

Description: It generates a summary of pending changes for an email request. It helps communicate the changes made in a branch or fork to the upstream repository maintainer.

Syntax: git request-pull origin/main <myfork or branch_name>



git send-email

Description: It sends a collection of patches as emails. It allows you to send multiple patch files to recipients via email. Please make sure to set the email address and name using the git config command so that the email client knows the sender's information when sending the emails.

Syntax: git send-email *.patch



git am

Description: It applies patches to the repository. It takes a patch file as input and applies the changes specified in the patch file to the repository.

Syntax: git am <patchfile.patch>



git daemon

Description: It exposes repositories via the Git:// protocol. The Git protocol is a lightweight protocol designed for efficient communication between Git clients and servers.

Syntax: git daemon –base-path=/path/to/repositories



git instaweb

Description: It instantly launches a web server to browse repositories. It provides a simplified way to view repository contents through a web interface without the need for configuring a full web server.

Syntax: git instaweb –httpd=webrick



git rerere

Description: It reuses recorded resolution of previously resolved merge conflicts. Please note that rerere.enabled configuration option needs to be set to "true" (git config –global rerere.enabled true) for git rerere to work. Additionally, note that git rerere only applies to conflicts that have been resolved using the same branch and commit.

Syntax: git rerere



## Summary: 

GitHub has over 100 million repositories. You can clone a repository and sync changes back to the original. You can also fork a repository and use it as the base for the new project or work on that project independently.

The steps included in a GitHub workflow are:

    Clone the remote repository or initialize a Git repository.

    Move files to a staging area.

    Perform an initial commit.

    Create a branch and work on it.

    Add files to the staging area and commit.

    Push local commits to the remote repository.

    Create a pull request for review and merging.

    Use the pull operation to update the local repository.

Multiple roles are involved in managing a project: Developer, Integrator, and Repository Administrator.

    A Developer working in a group project uses commands like git clone, git pull, git fetch, git push, and git request-pull in addition to the ones needed by a standalone developer.

    An Integrator in a group project reviews and integrates changes made by others. Integrators use commands like git pull, git revert, and git push in addition to the ones needed by participants.

    Repository Administrators structure how the repository is organized and how users interact with the repository. They also configure the servers needed for accessing the web services and documentation, define email and index settings, and manage the look and feel of the application.





## Terms and Definitions

**Cloning**  
A process of creating a copy of the project's code and its complete version history from the remote repository on the local machine.

**Commit**  
A snapshot of the project's current state at a specific point in time, along with a description of the changes made.

**Developer**  
A computer programmer who is responsible for writing code.

**Distributed version control system (DVCS)**  
A system that keeps track of changes to code, regardless of where it is stored. Multiple users work on the same codebase or repository, mirroring the codebase on their computers if needed, while the distributed version control software helps manage synchronization amongst the various codebase mirrors.

**Fork**  
A copy of a repository into your GitHub account.

**Forking**  
Forking creates a copy of a repository on which one can work without affecting the original repository.

**GitHub**  
A web-hosted service for the Git repository.

**Git**  
A free and open-source software distributed under the GNU General Public License. It is a distributed version control system that allows users to have a copy of their own project on their computer anywhere in the world.

**Integrator**  
A role that is responsible for managing changes made by developers.

**Master branch**  
A branch that stores the deployable version of your code. The master branch is created by default and is definitive.

**Merge**  
A process to combine changes from one branch to another, typically merging a feature branch into the main branch.

**Origin**  
A term that refers to the repository where a copy is cloned from.

**Pull request**  
A process used to request that someone review and approve your changes before they become final.

**Remote repositories**  
Repositories that are stored elsewhere. They can exist on the internet, on your network, or on your local computer.

**Repository administrator**  
A role that is responsible for configuring and maintaining access to the repository.

**Repository**  
A data structure for storing documents, including application source code. It contains the project folders that are set up for version control.

**Staging area**  
An area where commits can be formatted and reviewed before completing the commit.

**Upstream**  
A term used by developers to refer to the original source where the local copy was cloned from.

**Version control**  
A system that allows you to keep track of changes to your documents. This process allows you to recover older versions of the documents if any mistakes are made.