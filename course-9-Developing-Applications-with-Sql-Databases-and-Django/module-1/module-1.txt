### Introduction to Databases 

Structured Query Language, or SQL, was designed to manage data in relational databases and is useful for handling structured data. 

Data is a collection of facts in words, numbers, and pictures. 

A database is a repository of data that provides functionality for adding, modifying, and querying data. 

Relational databases store tabular data as collections of related items, with columns containing item properties. 

The basic SQL statements are CREATE TABLE, INSERT, SELECT, UPDATE, and DELETE. 

Non-relational databases provide a flexible and scalable approach to storing and retrieving data.

Relational databases are ideal for the optimized storage, retrieval, and processing of large volumes of data. 

RDBMS is a mature and well-documented technology, providing flexibility, reduced redundancy, ease of backup and disaster recovery, and ACID compliance. 

An Entity-Relationship model is a tool for designing relational databases. Entities become tables, and attributes are translated into columns. 


### Basic SQL Statements

Structured Query Language, or SQL, is used for querying and managing data. 

SQL is useful for handling structured data or data incorporating relations among entities and variables.

The SQL SELECT statement retrieves data from a relational database table. 

The SELECT statement is a query, and the output we get from executing this query is a Result Set or a Result Table.

In its simplest form, the syntax for a SELECT statement is: SELECT * from TableName

The SQL INSERT statement inserts data into a relational database table by adding rows.

The syntax of the INSERT statement is: INSERT INTO TableNameColumnName VALUES (values)

For the INSERT statement, the values provided in the Values clause must equal the number of column names specified in the Column Name list. This ensures that each column has a value. 

The SQL UPDATE statement is used to read and modify data.

The syntax of the UPDATE statement is as follows:  UPDATE [TableName] SET [[ColumnName]=[Value]] <WHERE [Condition]>

The SQL DELETE statement is used to remove data from a table.

The syntax of the DELETE statement is: DELETE FROM [TableName] <Where [Condition]>

The WHERE clause specifies the rows in a table that will be acted on by a SQL statement such as SELECT, DELETE, or UPDATE.



### SQL & Relational Databases

SELECT

Retrieves data from one or more tables based on specified columns.

SELECT column1, column2 FROM table_name;


FROM

Specifies the table from which data is retrieved.

SELECT column1, column2 FROM table_name;


WHERE

Filters data based on specified conditions.

SELECT column1, column2 FROM table_name WHERE condition;


ORDER BY

Sorts the result set based on specified columns in ascending or descending order.

SELECT column1, column2 FROM table_name ORDER BY column1 ASC;


GROUP BY

Groups rows based on a specified column.

SELECT column1, COUNT(*) FROM table_name GROUP BY column1;


HAVING

Filters grouped data based on specified conditions.

SELECT column1, COUNT(*) FROM table_name GROUP BY column1 HAVING COUNT(*) > 1;


INSERT INTO

Inserts data into a table.

INSERT INTO table_name (column1, column2) VALUES (value1, value2);


UPDATE

Modifies data in a table based on specified conditions.

UPDATE table_name SET column1 = value1 WHERE condition;


DELETE FROM

Deletes data from a table based on specified conditions.

DELETE FROM table_name WHERE condition;


JOIN

Combines rows from multiple tables based on related columns.

SELECT column1, column2 FROM table1 JOIN table2 ON table1.column = table2.column;

INNER JOIN

Returns only matching rows from both tables.

SELECT column1, column2 FROM table1 INNER JOIN table2 ON table1.column = table2.column;


LEFT JOIN

Returns all rows from the left table and matching rows from the right table.

SELECT column1, column2 FROM table1 LEFT JOIN table2 ON table1.column = table2.column;


RIGHT JOIN

Returns all rows from the right table and matching rows from the left table.

SELECT column1, column2 FROM table1 RIGHT JOIN table2 ON table1.column = table2.column;


FULL JOIN

Returns all rows from both tables, regardless of the match.

SELECT column1, column2 FROM table1 FULL JOIN table2 ON table1.column = table2.column;


DISTINCT

Returns unique values from a column.

SELECT DISTINCT column1 FROM table_name;


COUNT

Counts the number of rows or non-null values in a column.

SELECT COUNT(*) FROM table_name; or SELECT COUNT(column1) FROM table_name;


SUM

Calculates the sum of values in a column.

SELECT SUM(column1) FROM table_name;


AVG

Calculates the average value of a column.

SELECT AVG(column1) FROM table_name;


MAX

Finds the maximum value in a column.

SELECT MAX(column1) FROM table_name;


MIN

Finds the minimum value in a column. 


SELECT MIN(column1) FROM table_name;



### Creating Tables, Sorting Results, and Join

CREATE, ALTER, TRUNCATE, and DROP define, change, or drop database objects such as tables. 

The CREATE TABLE statement includes the definition of attributes of columns in the table, including:  

Names of columns

Datatypes of columns

Optional values, if required, such as the Primary Key constraint 

The ORDER BY clause is used in a SQL query to sort the result set by a specified column. For example, “ORDER BY title” sorts the result set by the column named “title.” 

You can also specify the sort of column by indicating the column sequence number. For example, “select title, pages from book ORDER BY 2” indicates that the sort order is based on the values in the second column.  

The JOIN operator combines rows from two or more tables based on a relationship between certain columns in these tables. 

The tables being joined are related by a common column, which is usually the primary key of one table and appears as a foreign key in the other table. 

The Primary Key of a relational table uniquely identifies each row in a table. 

A Foreign Key is a set of columns referring to a primary key of another entity. 

If you need to combine data from three or more different tables, add new tables to the joins. First, you combine table A and table B information by matching their shared attributes. Then, you join the information from table B and table C by matching their shared attributes. 

SQL offers several types of JOINs - such as INNER JOIN and OUTER JOIN. You can extract a data set corresponding to the intersection of the two tables involved or choose a bigger data set. 

