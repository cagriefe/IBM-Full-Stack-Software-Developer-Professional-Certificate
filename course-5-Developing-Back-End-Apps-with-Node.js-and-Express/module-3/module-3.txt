### Express Web Application Framework

## Middleware & Routers

In this article, we will discuss the terms middleware and routes.

Middleware is software that sits between applications, databases, or services and allows those different technologies to communicate. It creates seamless interactions for the end user in a distributed system. 

Express is a messaging framework used to handle routes and write middleware. The front end of an application uses Express to facilitate communication between components on the back end without the front-end and back-end services needing to use the same language. The front end communicates with the middleware, not directly with the back end. 

Messaging frameworks like Express commonly contain JSON, REST APIs, and web services. Older messaging frameworks may contain extensible markup language (XML) and simple object access protocols (SOAP) instead of JSON and REST APIs, respectively. The messaging framework provides a standardized way to handle data transfer among different applications.

A web server is an example of middleware that connects a website to a database. The web server handles the business logic and routes the data from the database based on the request. A route is the part of the code that associates an HTTP request, such as GET, POST, or DELETE, with a URL and the function that gets called that handles that URL. Routing is used in web development to split an application’s user interface based on rules identified by the browser’s URL. 

Router functions are called “middleware” collectively. Middleware is responsible for responding to an HTTP request or calling another function in the middleware chain. Express handles router functions through the Router class, such as Router.get(). As the name suggests, Router.get() handles HTTP GET requests. Other Router functions include Router.post(), Router.put(), Router.delete() in mostly the same way. These methods take two arguments, a URL path and a callback function. 

In addition to routing, middleware is also responsible for providing secure connections among services by encrypting and decrypting data, managing application loads by distributing traffic to different servers, and sorting or filtering data before the data is returned to the client.



### HTTP Methods and Rest APIs

Terms and Definitions
1.Service	A software component that makes up part of an application and serves a specific purpose. Generally, a service takes input from a client or another service and produces an output.
2.HTTP	The protocol used by a client-server architecture on the internet for fetching or exchanging resources data.
3.API	An Application Programming Interface is a set of definitions and protocols that allow two services to communicate with each other. The API requests data that can be exchanged between a resource and the results that are returned from that resource.
4.REST	A set of architectural guidelines that describe how to write an interface (API) between two components, usually a client and server, that describe how these components communicate with each other. REST stands for REpresentational State Transfer. REST describes a standard way to identify and manipulate resources. REST ensures the messages passed between the client and server are self-descriptive and define how the client interacts with the server to access resources on the server.
5.Resource	A resource is the fundamental concept of a RESTful API. It is an object that has a defined type, associated data, relationships to other resources, and a set of methods that can operate on it. A resource is commonly defined in JSON format but can also be XML.
6.Request	A request is made by a client to a host on a server to access a resource. The client uses parts of a URL to determine the information needed from the resource. Most common request methods include GET, POST, PUT, PATCH, and DELETE but also include HEAD, CONNECT, OPTIONS, TRACE, and PATCH.
7.Request Object	Contains the HTTP request data. It contains three parts: a URL, a header, and a body.
8.Route	The combination of an HTTP method and the path to the resource from the root of the path.
9.Endpoint	The location of the resource specified by a REST API that is being accessed on the server. It is usually identified through the URL in the HTTP method of the API.
10.Response Object	Contains the HTTP response data in response to a request. It contains a header, a body, and a status.
11.Response	A response is made by a server and sent to a client to either provide the client with the requested resource, tell the client the requested action has been completed, or let the client know there has been an error processing the request.
12.URL	A "Uniform Resource Identifier" is used interchangeably with the term URL. They are part of a RESTful API that locates the endpoint of the requested resource and contains the data about how that endpoint should be manipulated. The client issues an HTTP request using the URI/URL to manipulate the resource. They should consist of four parts: the hostname, the path, the header, and a query string.
13.Request Header	Information passed to the server about the retrieved resource or the requesting client. Examples include:
Method with endpoint: POST /car-reviews
User-agent: The type of browser the client is using.
Host: A computer on a network that communicates with other hosts.
ContentType: The media type of a resource such as text, audio, or an image.
Content length: The number of bytes of data being sent in a response.
Accept-Encoding: Expected return data format, e.g., application/json
Connection information
14.Request Body	Provides the data being passed to the server.
15.Protocol	Tells the service how the data is to be transferred between the server and the client.
16.Hostname	The name of a device on a network, also often called the site name.
17.Path	The path identifies the location of the resource in the service and its endpoint. For example: https://www.customerservice/customers/{customer_id}
18.Query String	The part of a URL that contains the query.
19.User-agent	The type of browser the client is using.
20.Host	A computer on a network that communicates with other hosts.
21.Content type	The media type of a resource such as text, audio, or an image.
22.Content length	The number of bytes of data being sent in a response.
23.Response Header	Contains metadata about the response, such as a time stamp, caching control, security info, content type, and the number of bytes in the response body.
24.Response Body	The data from the requested resource is sent back to the client.
25.Response Status	The return code that communicates the result of the request’s status to the client.
26.JSON	"JavaScript Object Notation" is a format for storing and transporting data, usually as a way to send data from a service on a server to the client. It consists of key-value pairs and is self-describing. The format of JSON data is the same as the code for creating JavaScript objects, making it easy to convert this data into JavaScript objects but can be written in any programming language. JSON has three data types: scalars (numbers, strings, Booleans, null), arrays, and objects.
27.Payload	The payload is the data in the body of a response being transported from a server to the client due to an API request.
28.GET	The GET method is used as a request that retrieves a representation of a resource. GET() should never modify a resource and only return a representation of the requested resource.
29.POST	HTTP method that sends data to the server to create a resource and should return 201_CREATED status code.
30.PUT	HTTP method that updates a resource or replaces an existing one. Calling PUT multiple times in a row does not have side effects, whereas POST does. It should return a 200_OK code if the resource exists and can be updated or return a 404_NOT_FOUND code if the resource doesn't exist.
31.DELETE	HTTP method that deletes a resource and returns 204_NO_CONTENT if the resource exists and can be deleted by the server or if the resource cannot be found, which means it has already been deleted.
32.PATCH	HTTP method that applies partial modifications to a resource.
33.Idempotent	Describes an element of a set that remains unchanged when making multiple identical requests. PUT and DELETE methods result in idempotent data if the same API method is called multiple times.
34.URL Path Parameter	Passed into the operation by the client as a variable in the URL's path.
35.URL Query Parameter	Contains key-value pairs, usually in JSON format, and are separated from the path by a '?'. If there are multiple key-value pairs, they should be separated by an '&'. The query can be used to pass in a filter to be applied to the results that are returned by the operation.
36.Header Parameter	Contains additional metadata about the query, such as identifying the client that is calling the operation.
37.Stateless	All requests from a client to a server for resources happen in isolation from each other. The server is unaware of the application's state on the client, so this information needs to be passed with every request.
38.Cacheable	The ability to store data on the client so that data can be used in a future request.
39.Middleware	Software that sits between applications, databases, or services and allows those different technologies to communicate.



### Module Summary

Developers rely on third-party packages to extend Node.js.  

You can use the npm application to manage Node.js packages in your Node.js framework installation. 

The MVC architecture style divides a back-end application into three parts: the model, the view, and the controller.  

REST API frameworks use HTTP methods to communicate with each other. 

Express abstracts low-level details.  

Routing can be handled at the application level or at the router level.  

Five types of middleware are application level, router level, error handling, built-in middleware, and third party.  

Template rendering is the ability of the server to fill in dynamic content.  

The npm jsonwebtoken package should be required in an Express application to authenticate a user. 



### Terms and Definitions

Access Token	A small piece of code that contains information about the user, their permissions, groups, and expirations that get passed from a server to the client.
API Endpoint	The touchpoint where the API connects to the application it is communicating with.
Application-Level Middleware	Acts as a gatekeeper and is bound to the application. No request to the application server can go past it. 
Authentication	The process of confirming a user’s identity using credentials by validating who they claim to be. Authentication assures an application’s security by guaranteeing that only those with valid credentials can access the system. 
Authorization	In token-based authentication, it is the process that gets executed when a web application wants to access a protected resource. A user authenticates against an authorization server. 
Built-In Middleware	Can be bound to either the entire application or to specific routers. Useful for activities such as rendering HTML pages from the server, parsing JSON input from the front end, and parsing cookies. 
Controller	The layer in an MVC application regulates the flow of the data. It is responsible for processing the data supplied to it by the user and sends that data to the model for manipulation or storage. 
Error-Handling Middleware	Can be bound to either the entire application or to specific routers. Error-handling middleware always takes four  arguments: error, request, response, and the next function that it needs to be chained to. Even if you don’t use the next parameter, you still define it in the method signature. 
Express.js	A web application framework based on the Node.js runtime environment, however, Express abstracts low-level details. 
Framework	A framework is a skeleton on which an application is built for a specific environment. The framework is the fundamental structure that supports the application. 
HTTP Headers	Additional information about and contained in an HTTP response or request. 
HTTP Request	A method called by a client and sent to a server requesting access to a resource on the server. 
HTTP Response	A method called by a server and sent to a client in response to an HTTP request. 
ID Token	An artifact that proves that a user has been authenticated and contains information about authorized API routes. 
JSON Payload	Data that is transferred in JSON format between the client and server in the header of an HTTP method. 
JWT	A JSON Web token. An internet standard for creating encrypted payload data in JSON format. 
Middleware	Includes functions that have access to the request and response objects and the next() function. 
Model	The layer in an MVC application responsible for managing the data of the application. It interacts with the database and handles the data logic. 
MVC	Short for “Model-View-Controller”. It is an architectural pattern that divides an application into three components: model, view, and controller. 
Node Framework	A framework that works in conjunction with Node.js. A framework is a skeleton on which an application is built for a specific environment. The framework is the fundamental structure that supports the application. 
npm	An application that manages Node.js packages in your Node.js framework installation. 
Passwordless Authentication	A type of authentication that uses public/private key pairs to encrypt and decrypt data passed between client and server without the need for a password. 
Private Key	In cryptography, it is a key that is known only to a specific client used to decrypt messages. Used in conjunction with a public key. 
Public Key	In cryptography, it is a key that can be used by anyone to encrypt messages for a specific client. Used in conjunction with a private key. 
REST	“Representational state transfer” is a set of guidelines for creating stateless client/server interfaces using HTTP methods. 
REST API	An API used for communicating between clients and servers that conforms to REST architecture principles. 
Route	The code that associates an HTTP request method and a URL. 
Router-Level Middleware	Bound to a router and not bound to an application. You can use specific middleware for a specific route instead of having all requests go through the same middleware. Then you bind the application routes to each router. 
Session-based Authentication	A type of authentication where a user provides login credentials that are verified against stored credentials in a database on a server. A session ID is provided to the client and stored in the browser as a cookie. 
Statelessness	Implies that each HTTP request happens in isolation in relation to other requests. The state of the client is not stored on the server; the state is passed to the server by the client for each request. 
Template Rendering	The ability of the server to fill in dynamic content in an HTML template. 
Token	Contains three parts, the header, the payload, and the signature. The header contains information about the type of token and the algorithm used to create it. The payload contains user attributes, called claims, such as permissions, groups, and expirations. The signature verifies the token’s integrity, meaning that the token hasn’t changed during transit. 
Token-based Authentication	A type of authentication that uses access tokens, often JWTs, which get passed between server and client with the data that is passed between the two. 
TypeScript	A language that builds on top of JavaScript and provides type safety which assists with the development of large-scale applications by reducing the complexity of component development in JavaScript. 
View	The layer in an MVC application responsible for rendering the presentation of the data that is passed to it by the model. 
xml2js	Node.js package to parse a string of XML elements into a JavaScript object. 