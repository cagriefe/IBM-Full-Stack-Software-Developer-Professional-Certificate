### Hooks and Form Management in React

The useEffect hook in React enables the execution of side effects within functional components. In React's useEffect hook, dependencies refer to variables or values that determine when useEffect should run.

Custom hooks allow you to abstract complex logic and easily reuse it across different components in your application.

External services are any program, platform, or infrastructure your application uses to connect to and work with other applications over a network.

APIs enable you to acquire data, execute operations, or add extra features to your application.

Within React, components typically manage form data.

React inputs are classified into two categories: controlled and uncontrolled. In uncontrolled input, React puts the value on the page, and the browser keeps track of the rest. Controlled inputs, require you to write the code to manage the value explicitly.

Access control methods are frameworks for regulating access to physical or digital resources. There are two types of access control methods: traditional and innovative.




### Application State Management with Redux

The Redux elements involved in updating the component properties include actions, the Store, and reducers.

Redux makes use of the entire application's states as opposed to using component states.

Within Redux, the existing application states reside within an object known as the store.

You use action objects to communicate to the store what data you need to update and use reducers to tell the application how to make the update. 

Reducers are pure functions that receive the current state and an action object and return a new state with the actions performed.

Synchronous operations run in a first-to-last sequence, beginning the next operation only after the previous one has finished. 

Asynchronous operations can occur in parallel. They don't require the previous operation to be completed before beginning the next. 



### Redux and React Terminology

**Action creator**  
An action creator is a function that returns an action object containing a type property (identifying the action) and optionally a payload property (data associated with the action).

**Actions in Redux**  
Actions are payloads of information that send data from the application to the Redux store, describing "what happened" in the application.

**Application state**  
A state that holds information about the entire application.

**Asynchronous or async code**  
Code that runs in parallel. This means an operation can occur while another is still being processed.

**Axios**  
A popular JavaScript library for HTTP requests from web browsers.

**combineReducers()**  
A Redux function used to combine multiple reducers into a single root reducer for the Redux store.

**createSlice()**  
A function in Redux Toolkit (RTK) that allows developers to define 'slice reducers' that automatically handle immutable updates to the state.

**configureStore()**  
A function in RTK that combines several pieces of Redux setup logic into a single function call.

**Controlled component**  
A component where the React state manages the form data. You must explicitly write the code to create the state and tell it how to update when the data changes.

**Custom hook**  
A new composition of one or multiple hooks.

**fetch**  
A modern JavaScript API for making asynchronous HTTP requests in the browser environment. It allows you to fetch resources, such as JSON data, from servers over the network. It is commonly used for data fetching in React applications to interact with backend servers or APIs.

**Fields**  
Areas in a form in which users interact with the data.

**Forms**  
Allow users to interact with data on a web page.

**getState()**  
A function in the store that allows access to the state.

**Hook**  
A function that enables you to reuse code logic across components without changing component hierarchy or introducing unnecessary nesting.

**Payload property**  
An optional property containing some data required to perform a task.

**Reducers in Redux**  
Functions that return the new state.

**Redux**  
A library that can maintain the application state and pass information about the application to a component whenever it gets called.

**Redux store**  
A data structure that stores and manages data.

**Redux Saga**  
A middleware that exposes a set of helper functions, or sagas, to create declarative effects that are plain JavaScript objects, and your sagas can yield them.

**Redux Thunk**  
A middleware for Redux that allows action creators to return functions instead of plain objects, enabling asynchronous logic (e.g., AJAX requests) within Redux actions.

**Redux Toolkit (RTK)**  
An official package provided by the Redux team to simplify Redux development and make it more efficient.

**Side effects**  
Refers to any operation you must execute as soon as the page loads without calling those operations/functionalities separately, such as fetching data from an API, subscribing to events, manipulating the DOM, or setting timers.

**Slice**  
In Redux Toolkit (RTK), represents a portion of the Redux state and includes the logic for updating that slice's state using reducers and action creators.

**Store in RTK**  
All the slices are combined to form the complete state tree of your application.

**Subscription**  
A mechanism in Redux that allows components to subscribe to state changes in the Redux store, ensuring they receive updates and can react accordingly.

**Synchronous or sync code**  
Code that runs in an orderly sequence from top to bottom. This means that each operation must wait for the previous one to complete before executing.

**Type property**  
A string that identifies the action.

**Uncontrolled component**  
A component where you use React to place the value on the page, and the browser keeps track of the rest.

**useContext hook**  
A hook that manages context changes and provides access to a context.

**useEffect hook**  
A hook that manages side effects such as document changes and HTTP requests.

**useReducer hook**  
A React hook that facilitates complex state logic in functional components, commonly used for managing Redux state updates.

**useState hook**  
A hook that allows you to add state management functionalities to function components.
